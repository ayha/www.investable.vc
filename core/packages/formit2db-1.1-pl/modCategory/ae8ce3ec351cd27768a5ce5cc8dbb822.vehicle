<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'b0a5745e4592a813ac68cffc1fbd2c6d' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"FormIt2db","description":"FormIt to DB hook.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt2db\\/db2FormIt\\n * \\n * Copyright 2013 by Thomas Jakobi <thomas.jakobi@partout.info>\\n * \\n * The snippets bases on the code in the following thread in MODX forum \\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560 \\n * \\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but \\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more \\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc., \\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage formit2db snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), TRUE);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', TRUE);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', TRUE);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', TRUE);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', TRUE));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', TRUE);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, TRUE);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', TRUE);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', TRUE));\\n$removeFields = $modx->fromJson($modx->getOption(\'removeFields\', $scriptProperties, \'[]\', TRUE));\\n$autoPackage = (boolean) $modx->getOption(\'autoPackage\', $scriptProperties, FALSE);\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packagename, $modelpath, $prefix);\\nif ($autoPackage) {\\n\\t$manager = $modx->getManager();\\n\\t$generator = $manager->getGenerator();\\n\\t$classname = $generator->getClassName($tablename);\\n}\\n\\nif ($fieldname) {\\n\\tif (is_array($where)) {\\n\\t\\t$where[$fieldname] = $_POST[$paramname];\\n\\t} else {\\n\\t\\t$where = array($fieldname => $_POST[$paramname]);\\n\\t}\\n}\\n\\nif (is_array($where)) {\\n\\t$dataobject = $modx->getObject($classname, $where);\\n\\tif (empty($dataobject)) {\\n\\t\\t$dataobject = $modx->newObject($classname);\\n\\t}\\n} else {\\n\\t$dataobject = $modx->newObject($classname);\\n}\\n\\nif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n\\t$errorMsg = \'Failed to create object of type: \' . $classname;\\n\\t$hook->addError(\'error_message\', $errorMsg);\\n\\treturn FALSE;\\n}\\n\\n$formFields = $hook->getValues();\\nforeach ($formFields as $field => $value) {\\n\\tif (!in_array($field, $removeFields)) {\\n\\t\\tif (in_array($field, $arrayFields)) {\\n\\t\\t\\tswitch ($arrayFormat) {\\n\\t\\t\\t\\tcase \'json\': {\\n\\t\\t\\t\\t\\t\\t$value = json_encode($value);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase \'csv\' :\\n\\t\\t\\t\\tdefault : {\\n\\t\\t\\t\\t\\t\\t$value = implode(\',\', $value);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t$dataobject->set($field, $value);\\n\\t}\\n}\\n\\nif (!$dataobject->save()) {\\n\\t$errorMsg = \'Failed to save object of type: \' . $classname;\\n\\t$hook->addError(\'error_message\', $errorMsg);\\n\\treturn FALSE;\\n}\\nreturn TRUE;","locked":0,"properties":"a:11:{s:6:\\"prefix\\";a:7:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:21:\\"prop_formit2db.prefix\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"packagename\\";a:7:{s:4:\\"name\\";s:11:\\"packagename\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.packagename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"classname\\";a:7:{s:4:\\"name\\";s:9:\\"classname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.classname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tablename\\";a:7:{s:4:\\"name\\";s:9:\\"tablename\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.tablename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:20:\\"prop_formit2db.where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"paramname\\";a:7:{s:4:\\"name\\";s:9:\\"paramname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.paramname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"fieldname\\";a:7:{s:4:\\"name\\";s:9:\\"fieldname\\";s:4:\\"desc\\";s:24:\\"prop_formit2db.fieldname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFormat\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFormat\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFormat\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"CSV\\";s:5:\\"value\\";s:3:\\"csv\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"JSON\\";s:5:\\"value\\";s:4:\\"json\\";}}s:5:\\"value\\";s:3:\\"csv\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFields\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFields\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"removeFields\\";a:7:{s:4:\\"name\\";s:12:\\"removeFields\\";s:4:\\"desc\\";s:27:\\"prop_formit2db.removeFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"autoPackage\\";a:7:{s:4:\\"name\\";s:11:\\"autoPackage\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.autoPackage\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt2db\\/db2FormIt\\n * \\n * Copyright 2013 by Thomas Jakobi <thomas.jakobi@partout.info>\\n * \\n * The snippets bases on the code in the following thread in MODX forum \\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560 \\n * \\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but \\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more \\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc., \\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage formit2db snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), TRUE);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', TRUE);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', TRUE);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', TRUE);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', TRUE));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', TRUE);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, TRUE);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', TRUE);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', TRUE));\\n$removeFields = $modx->fromJson($modx->getOption(\'removeFields\', $scriptProperties, \'[]\', TRUE));\\n$autoPackage = (boolean) $modx->getOption(\'autoPackage\', $scriptProperties, FALSE);\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packagename, $modelpath, $prefix);\\nif ($autoPackage) {\\n\\t$manager = $modx->getManager();\\n\\t$generator = $manager->getGenerator();\\n\\t$classname = $generator->getClassName($tablename);\\n}\\n\\nif ($fieldname) {\\n\\tif (is_array($where)) {\\n\\t\\t$where[$fieldname] = $_POST[$paramname];\\n\\t} else {\\n\\t\\t$where = array($fieldname => $_POST[$paramname]);\\n\\t}\\n}\\n\\nif (is_array($where)) {\\n\\t$dataobject = $modx->getObject($classname, $where);\\n\\tif (empty($dataobject)) {\\n\\t\\t$dataobject = $modx->newObject($classname);\\n\\t}\\n} else {\\n\\t$dataobject = $modx->newObject($classname);\\n}\\n\\nif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n\\t$errorMsg = \'Failed to create object of type: \' . $classname;\\n\\t$hook->addError(\'error_message\', $errorMsg);\\n\\treturn FALSE;\\n}\\n\\n$formFields = $hook->getValues();\\nforeach ($formFields as $field => $value) {\\n\\tif (!in_array($field, $removeFields)) {\\n\\t\\tif (in_array($field, $arrayFields)) {\\n\\t\\t\\tswitch ($arrayFormat) {\\n\\t\\t\\t\\tcase \'json\': {\\n\\t\\t\\t\\t\\t\\t$value = json_encode($value);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase \'csv\' :\\n\\t\\t\\t\\tdefault : {\\n\\t\\t\\t\\t\\t\\t$value = implode(\',\', $value);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t$dataobject->set($field, $value);\\n\\t}\\n}\\n\\nif (!$dataobject->save()) {\\n\\t$errorMsg = \'Failed to save object of type: \' . $classname;\\n\\t$hook->addError(\'error_message\', $errorMsg);\\n\\treturn FALSE;\\n}\\nreturn TRUE;"}',
        'guid' => '4369f6edde80d95782d3fc8185639cea',
        'native_key' => 1,
        'signature' => 'be63680d3fdeec0653ecb1280815cde0',
      ),
      '64597582db1f6eefcee1ff0e3ac02b4e' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"db2FormIt","description":"DB to FormIt hook.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FormIt2db\\/db2FormIt\\n * \\n * Copyright 2013 by Thomas Jakobi <thomas.jakobi@partout.info>\\n * \\n * The snippets bases on the code in the following thread in MODX forum \\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560 \\n * \\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but \\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more \\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc., \\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage db2formit snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), TRUE);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', TRUE);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', TRUE);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', TRUE);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', TRUE));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', TRUE);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, TRUE);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', TRUE);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', TRUE));\\n$ignoreFields = $modx->fromJson($modx->getOption(\'ignoreFields\', $scriptProperties, \'[]\', TRUE));\\n$notFoundRedirect = (integer) $modx->getOption(\'notFoundRedirect\', $scriptProperties, \'0\', TRUE);\\n$autoPackage = (boolean) $modx->getOption(\'autoPackage\', $scriptProperties, FALSE);\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n\\t$schemapath = $modelpath . \'schema\\/\';\\n\\t$schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n\\t$manager = $modx->getManager();\\n\\t$generator = $manager->getGenerator();\\n\\tif (!file_exists($schemafile)) {\\n\\n\\t\\tif (!is_dir($packagepath)) {\\n\\t\\t\\tmkdir($packagepath, 0777);\\n\\t\\t}\\n\\t\\tif (!is_dir($modelpath)) {\\n\\t\\t\\tmkdir($modelpath, 0777);\\n\\t\\t}\\n\\t\\tif (!is_dir($schemapath)) {\\n\\t\\t\\tmkdir($schemapath, 0777);\\n\\t\\t}\\n\\t\\t\\/\\/Use this to create a schema from an existing database\\n\\t\\tif (!$generator->writeSchema($schemafile, $packagename, \'xPDOObject\', $prefix, TRUE)) {\\n\\t\\t\\t$modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema in FormIt2db\');\\n\\t\\t}\\n\\t}\\n\\t$generator->parseSchema($schemafile, $modelpath);\\n\\t$modx->log(modX::LOG_LEVEL_WARN, \'FormIt2db autoPackage parameter active\');\\n\\t$modx->addPackage($packagename, $modelpath, $prefix);\\n\\t$classname = $generator->getClassName($tablename);\\n} else {\\n\\t$modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n\\tif (is_array($where)) {\\n\\t\\t$where[$fieldname] = $_REQUEST[$paramname];\\n\\t} else {\\n\\t\\t$where = array($fieldname => $_REQUEST[$paramname]);\\n\\t}\\n}\\n\\nif (is_array($where)) {\\n\\tif ($dataobject = $modx->getObject($classname, $where)) {\\n\\t\\tif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n\\t\\t\\t$errorMsg = \'Failed to create object of type: \' . $classname;\\n\\t\\t\\t$hook->addError(\'error_message\', $errorMsg);\\n\\t\\t\\treturn FALSE;\\n\\t\\t}\\n\\t\\tif (empty($dataobject) && $notFoundRedirect) {\\n\\t\\t\\t$modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n\\t\\t}\\n\\t\\t$formFields = $dataobject->toArray();\\n\\t\\tforeach ($formFields as $field => $value) {\\n\\t\\t\\tif (in_array($field, $ignoreFields)) {\\n\\t\\t\\t\\tunset($formFields[$field]);\\n\\t\\t\\t}\\n\\t\\t\\tif (in_array($field, $arrayFields)) {\\n\\t\\t\\t\\tswitch ($arrayFormat) {\\n\\t\\t\\t\\t\\tcase \'json\': {\\n\\t\\t\\t\\t\\t\\t\\t$formFields[$field] = json_decode($value, TRUE);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcase \'csv\' :\\n\\t\\t\\t\\t\\tdefault : {\\n\\t\\t\\t\\t\\t\\t\\t$formFields[$field] = explode(\',\', $value);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t$hook->setValues($formFields);\\n\\t}\\n} else {\\n\\tif ($notFoundRedirect) {\\n\\t\\t$modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n\\t}\\n}\\n\\nreturn TRUE;","locked":0,"properties":"a:12:{s:6:\\"prefix\\";a:7:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:21:\\"prop_db2formit.prefix\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"packagename\\";a:7:{s:4:\\"name\\";s:11:\\"packagename\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.packagename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"classname\\";a:7:{s:4:\\"name\\";s:9:\\"classname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.classname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tablename\\";a:7:{s:4:\\"name\\";s:9:\\"tablename\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.tablename\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:20:\\"prop_db2formit.where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"paramname\\";a:7:{s:4:\\"name\\";s:9:\\"paramname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.paramname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"fieldname\\";a:7:{s:4:\\"name\\";s:9:\\"fieldname\\";s:4:\\"desc\\";s:24:\\"prop_db2formit.fieldname\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFormat\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFormat\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFormat\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"CSV\\";s:5:\\"value\\";s:3:\\"csv\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"JSON\\";s:5:\\"value\\";s:4:\\"json\\";}}s:5:\\"value\\";s:3:\\"csv\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"arrayFields\\";a:7:{s:4:\\"name\\";s:11:\\"arrayFields\\";s:4:\\"desc\\";s:26:\\"prop_db2formit.arrayFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"ignoreFields\\";a:7:{s:4:\\"name\\";s:12:\\"ignoreFields\\";s:4:\\"desc\\";s:27:\\"prop_db2formit.ignoreFields\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"[]\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"notFoundRedirect\\";a:7:{s:4:\\"name\\";s:16:\\"notFoundRedirect\\";s:4:\\"desc\\";s:31:\\"prop_db2formit.notFoundRedirect\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"autoPackage\\";a:7:{s:4:\\"name\\";s:11:\\"autoPackage\\";s:4:\\"desc\\";s:26:\\"prop_formit2db.autoPackage\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"formit2db:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * FormIt2db\\/db2FormIt\\n * \\n * Copyright 2013 by Thomas Jakobi <thomas.jakobi@partout.info>\\n * \\n * The snippets bases on the code in the following thread in MODX forum \\n * http:\\/\\/forums.modx.com\\/thread\\/?thread=32560 \\n * \\n * FormIt2db\\/db2FormIt is free software; you can redistribute it and\\/or modify\\n * it under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * FormIt2db\\/db2FormIt is distributed in the hope that it will be useful, but \\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more \\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FormIt2db\\/db2FormIt; if not, write to the Free Software Foundation, Inc., \\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package formit2db\\n * @subpackage db2formit snippet\\n *\\/\\n$prefix = $modx->getOption(\'prefix\', $scriptProperties, $modx->getOption(xPDO::OPT_TABLE_PREFIX), TRUE);\\n$packagename = $modx->getOption(\'packagename\', $scriptProperties, \'\', TRUE);\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\', TRUE);\\n$tablename = $modx->getOption(\'tablename\', $scriptProperties, \'\', TRUE);\\n$where = $modx->fromJson($modx->getOption(\'where\', $scriptProperties, \'\', TRUE));\\n$paramname = $modx->getOption(\'paramname\', $scriptProperties, \'\', TRUE);\\n$fieldname = $modx->getOption(\'fieldname\', $scriptProperties, $paramname, TRUE);\\n$arrayFormat = $modx->getOption(\'arrayFormat\', $scriptProperties, \'csv\', TRUE);\\n$arrayFields = $modx->fromJson($modx->getOption(\'arrayFields\', $scriptProperties, \'[]\', TRUE));\\n$ignoreFields = $modx->fromJson($modx->getOption(\'ignoreFields\', $scriptProperties, \'[]\', TRUE));\\n$notFoundRedirect = (integer) $modx->getOption(\'notFoundRedirect\', $scriptProperties, \'0\', TRUE);\\n$autoPackage = (boolean) $modx->getOption(\'autoPackage\', $scriptProperties, FALSE);\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packagename . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\nif ($autoPackage) {\\n\\t$schemapath = $modelpath . \'schema\\/\';\\n\\t$schemafile = $schemapath . $packagename . \'.mysql.schema.xml\';\\n\\t$manager = $modx->getManager();\\n\\t$generator = $manager->getGenerator();\\n\\tif (!file_exists($schemafile)) {\\n\\n\\t\\tif (!is_dir($packagepath)) {\\n\\t\\t\\tmkdir($packagepath, 0777);\\n\\t\\t}\\n\\t\\tif (!is_dir($modelpath)) {\\n\\t\\t\\tmkdir($modelpath, 0777);\\n\\t\\t}\\n\\t\\tif (!is_dir($schemapath)) {\\n\\t\\t\\tmkdir($schemapath, 0777);\\n\\t\\t}\\n\\t\\t\\/\\/Use this to create a schema from an existing database\\n\\t\\tif (!$generator->writeSchema($schemafile, $packagename, \'xPDOObject\', $prefix, TRUE)) {\\n\\t\\t\\t$modx->log(modX::LOG_LEVEL_ERROR, \'Could not generate XML schema in FormIt2db\');\\n\\t\\t}\\n\\t}\\n\\t$generator->parseSchema($schemafile, $modelpath);\\n\\t$modx->log(modX::LOG_LEVEL_WARN, \'FormIt2db autoPackage parameter active\');\\n\\t$modx->addPackage($packagename, $modelpath, $prefix);\\n\\t$classname = $generator->getClassName($tablename);\\n} else {\\n\\t$modx->addPackage($packagename, $modelpath, $prefix);\\n}\\n\\nif ($fieldname) {\\n\\tif (is_array($where)) {\\n\\t\\t$where[$fieldname] = $_REQUEST[$paramname];\\n\\t} else {\\n\\t\\t$where = array($fieldname => $_REQUEST[$paramname]);\\n\\t}\\n}\\n\\nif (is_array($where)) {\\n\\tif ($dataobject = $modx->getObject($classname, $where)) {\\n\\t\\tif (!is_object($dataobject) || !($dataobject instanceof xPDOObject)) {\\n\\t\\t\\t$errorMsg = \'Failed to create object of type: \' . $classname;\\n\\t\\t\\t$hook->addError(\'error_message\', $errorMsg);\\n\\t\\t\\treturn FALSE;\\n\\t\\t}\\n\\t\\tif (empty($dataobject) && $notFoundRedirect) {\\n\\t\\t\\t$modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n\\t\\t}\\n\\t\\t$formFields = $dataobject->toArray();\\n\\t\\tforeach ($formFields as $field => $value) {\\n\\t\\t\\tif (in_array($field, $ignoreFields)) {\\n\\t\\t\\t\\tunset($formFields[$field]);\\n\\t\\t\\t}\\n\\t\\t\\tif (in_array($field, $arrayFields)) {\\n\\t\\t\\t\\tswitch ($arrayFormat) {\\n\\t\\t\\t\\t\\tcase \'json\': {\\n\\t\\t\\t\\t\\t\\t\\t$formFields[$field] = json_decode($value, TRUE);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcase \'csv\' :\\n\\t\\t\\t\\t\\tdefault : {\\n\\t\\t\\t\\t\\t\\t\\t$formFields[$field] = explode(\',\', $value);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t$hook->setValues($formFields);\\n\\t}\\n} else {\\n\\tif ($notFoundRedirect) {\\n\\t\\t$modx->sendRedirect($modx->makeUrl($notFoundRedirect));\\n\\t}\\n}\\n\\nreturn TRUE;"}',
        'guid' => 'f027c0c3400e60fe86e9f1ef8fd3d24a',
        'native_key' => 2,
        'signature' => 'a520c071eb94cbac0ef925fa3a5b47dc',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'formit2db',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"formit2db-1.1-pl\\/modCategory\\/ae8ce3ec351cd27768a5ce5cc8dbb822\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"formit2db"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '7b75d435a0fc531523f156cccc2a8425',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'ae8ce3ec351cd27768a5ce5cc8dbb822',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"FormIt2db"}',
);